import java.io.PrintStream;
import java.io.IOException;
import java.io.File;
import java.util.Date;

/**
 * Copyright 2006 James Lawrence
 * Date: 19-Dec-2006
 * Time: 03:40:04
 * Modification and redistribution without explicit permission by the creator(s) is prohibited
 * This source may be modified for personal use as long as the original author is accredited
 */
public class StructureGen {
    public static boolean verbose;
    public static boolean strip;
    public static String dir;
    public static String out;
    public static int count;
    public static File current;
    public static String pre = "";
    public static PrintStream fOut;

    public static void main(String[] args) {
        if(args.length < 1) {
            System.err.println("USAGE: StructureGen [options] [directory] {output}");
            System.exit(-1);
        }
        if(args[0].equals("--help")) {
            System.out.println("USAGE: StructureGen {options} [directory] {output}");
            System.out.println("Valid options are:");
            System.out.println("\t-s: Strip file extensions");
            System.out.println("\t-v: Verbose output.");
            System.exit(-1);
        }
        int off = 0;
        for(String arg: args) {
            off++;
            if(arg.equalsIgnoreCase("-s"))
                strip = true;
            else if(arg.equalsIgnoreCase("-v"))
                verbose = true;
            else
                off--;
        }
        dir = args[off];
        if(args.length < off + 1)
            out = args[off];
        else
            out = "output.txt";
        verbose("Output directory: " + dir);
        verbose("Output file: " + out);
        verbose("Verbose: true (if not you wouldn't be seeing this)");
        verbose("Strip File Extensions: " + strip);
        try {
            File f = new File(out);
            if(!f.exists() && !f.createNewFile())
                throw new IOException("File does not exist, and cannot be created!");
            if(!f.canWrite())
                throw new IOException("Output file is not writeable!");
            fOut = new PrintStream(f);
        } catch (IOException ioe) {
            System.err.println("Error creating PrintStream for output data: " + ioe);
            System.exit(2);
        }
        System.out.println("Starting...");
        writeComments();
        current = new File("");
        if(!new File(dir).exists()) {
            System.out.println("Parsing directory does not exist!");
            System.exit(-1);
        }
        pre = "   |";
        long start = System.currentTimeMillis();
        parse(dir);
        fOut.close();
        long end = System.currentTimeMillis() - start;
        System.out.println("Parsed " + count + " files in " + end + "ms.");
    }

    public static void parse(String dir) {
        current = new File(dir);
        verbose("Parsing \"" + dir + "\"...");
        fOut.println("-" + current.getName());
        File[] files = current.listFiles();
        for(int i = 0; i < files.length; i++) {
            count++;
            File f = files[i];
            if(i + 1 >= files.length) {
                fOut.print(pre.substring(0, pre.length() - 1) + "`");
                pre = pre.substring(0, pre.length() - 1) + " ";
            } else
                fOut.print(pre);
            if(f.isDirectory()) {
                pre += "   |";
                parse(new File(dir, f.getName()).getAbsolutePath());
                pre = pre.substring(0, pre.length() - 4);
            } else if(strip && f.getName().contains("."))
                fOut.println("-" + f.getName().substring(0, strip? f.getName().lastIndexOf('.'): f.getName().length()));
              else fOut.println("-" + f.getName());
        }
    }

    public static void writeComments() {
        fOut.println("# File generated by StructureGen, " + new Date().toString());
        fOut.println("# Target directory: " + dir);
        fOut.println("# Strip file extensions: " + strip);
        fOut.println();
    }

    public static void verbose(String line) {
        if(verbose)
            System.out.println(line);
    }
}